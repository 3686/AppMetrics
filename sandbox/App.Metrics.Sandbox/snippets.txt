// Add Reporting
services.AddMetrics(Configuration.GetSection("AppMetrics")).
                     AddReporting(
                         factory =>
                         {
                             
                         }).
                     AddHealthChecks(

-------------------------------------------------------------------------------------
// InfluxDB Reporting Config
if (ReportTypes.Any(r => r == ReportType.InfluxDB))
{
    factory.AddInfluxDb(
        new InfluxDBReporterSettings
        {
            HttpPolicy = new HttpPolicy
                        {
                            FailuresBeforeBackoff = 3,
                            BackoffPeriod = TimeSpan.FromSeconds(30),
                            Timeout = TimeSpan.FromSeconds(10)
                        },
            InfluxDbSettings = new InfluxDBSettings(InfluxDbDatabase, InfluxDbUri),
            ReportInterval = TimeSpan.FromSeconds(5)
        },
        reportFilter);
}
-------------------------------------------------------------------------------------
// ES Reporting Config
if (ReportTypes.Any(r => r == ReportType.ElasticSearch))
{
    factory.AddElasticSearch(
        new ElasticSearchReporterSettings
        {
            HttpPolicy = new Extensions.Reporting.ElasticSearch.HttpPolicy
                        {
                            FailuresBeforeBackoff = 3,
                            BackoffPeriod = TimeSpan.FromSeconds(30),
                            Timeout = TimeSpan.FromSeconds(10)
                        },
            ElasticSearchSettings = new ElasticSearchSettings(ElasticSearchUri, ElasticSearchIndex),
            ReportInterval = TimeSpan.FromSeconds(5)
        },
        reportFilter);
}
-------------------------------------------------------------------------------------
// Graphite Reporting Config
if (ReportTypes.Any(r => r == ReportType.Graphite))
{
    factory.AddGraphite(
        new GraphiteReporterSettings
        {
            HttpPolicy = new Extensions.Reporting.Graphite.HttpPolicy
            {
                FailuresBeforeBackoff = 3,
                BackoffPeriod = TimeSpan.FromSeconds(30),
                Timeout = TimeSpan.FromSeconds(3)
            },
            GraphiteSettings = new GraphiteSettings(GraphiteUri),
            ReportInterval = TimeSpan.FromSeconds(5)
        });
}
-------------------------------------------------------------------------------------
// Pre-Defined Health Check Config
services.AddMetrics(Configuration.GetSection("AppMetrics")).
                     AddHealthChecks(
                         factory =>
                         {
                             factory.RegisterPingHealthCheck("google ping", "google.com", TimeSpan.FromSeconds(10));
                             factory.RegisterHttpGetHealthCheck("github", new Uri("https://github.com/"), TimeSpan.FromSeconds(10));
                             factory.RegisterMetricCheck(
                                 name: "Database Call Duration",
                                 options: SandboxMetricsRegistry.DatabaseTimer,
                                 tags: new MetricTags("client_id", "client-9"),
                                 passing: value => (message:
                                     $"OK. 98th Percentile < 100ms ({value.Histogram.Percentile98}{SandboxMetricsRegistry.DatabaseTimer.DurationUnit.Unit()})"
                                     , result: value.Histogram.Percentile98 < 100),
                                 warning: value => (message:
                                     $"WARNING. 98th Percentile > 100ms ({value.Histogram.Percentile98}{SandboxMetricsRegistry.DatabaseTimer.DurationUnit.Unit()})"
                                     , result: value.Histogram.Percentile98 < 200),
                                 failing: value => (message:
                                     $"FAILED. 98th Percentile > 200ms ({value.Histogram.Percentile98}{SandboxMetricsRegistry.DatabaseTimer.DurationUnit.Unit()})"
                                     , result: value.Histogram.Percentile98 > 200));
                         }
                     ).
